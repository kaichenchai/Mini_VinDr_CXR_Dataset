import argparse
from train import model_loader, generate_transformations
import torch
import torchvision
from torch.utils.data import DataLoader

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--weights_path", type=str, required=True, help="Weights to load to model")
    parser.add_argument("--images_path", type=str, required=True, help="Folder of images to parse")
    args = parser.parse_args()
    trained_weights = torch.load(args.weights_path)
    model = model_loader(feature_extracting=False,
                         num_classes=3,
                         greyscale_single_channel=True,
                         imgsize=(1024,1024),
                         weights=trained_weights)
    transforms = generate_transformations(no_img_channels=1)
    dataset = torchvision.datasets.ImageFolder(root=args.images_path,
                                               transform=transforms)
    dataset_loader = DataLoader(dataset=dataset, batch_size=16,
                                collate_fn=lambda x: tuple(zip(*x)))
    model.eval()
    with torch.no_grad():
        for data, target in dataset_loader():
            prediction = model(data)